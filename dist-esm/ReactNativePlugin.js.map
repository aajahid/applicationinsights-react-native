{"version":3,"file":"ReactNativePlugin.js","sourceRoot":"","sources":["../src/ReactNativePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ReactNativePlugin.ts\r\n * @copyright Microsoft 2019\r\n */\r\n\r\nimport {\r\n    ITelemetryPlugin,\r\n    ITelemetryItem,\r\n    IPlugin,\r\n    IAppInsightsCore, \r\n    CoreUtils,\r\n    LoggingSeverity,\r\n    _InternalMessageId,\r\n    BaseTelemetryPlugin,\r\n    IProcessTelemetryContext\r\n} from '@microsoft/applicationinsights-core-js';\r\nimport { ConfigurationManager, IDevice, IExceptionTelemetry, IAppInsights, SeverityLevel, AnalyticsPluginIdentifier  } from '@microsoft/applicationinsights-common';\r\nimport DeviceInfo from 'react-native-device-info';\r\n\r\nimport { INativeDevice, IReactNativePluginConfig } from './Interfaces';\r\nimport dynamicProto from '@microsoft/dynamicproto-js';\r\n\r\nexport class ReactNativePlugin extends BaseTelemetryPlugin {\r\n\r\n    identifier: string = 'AppInsightsReactNativePlugin';\r\n    priority: number = 140;\r\n    _nextPlugin?: ITelemetryPlugin;\r\n\r\n    constructor(config?: IReactNativePluginConfig) {\r\n        super();\r\n\r\n        let _device: INativeDevice = {};\r\n        let _config: IReactNativePluginConfig = config || _getDefaultConfig();\r\n        let _analyticsPlugin: IAppInsights;\r\n        let _defaultHandler;\r\n    \r\n        dynamicProto(ReactNativePlugin, this, (_self, _base) => {\r\n            _self.initialize = (\r\n                config?: IReactNativePluginConfig | object, // need `| object` to coerce to interface\r\n                core?: IAppInsightsCore,\r\n                extensions?: IPlugin[]\r\n            ) => {\r\n                if (!_self.isInitialized()) {\r\n                    _base.initialize(config, core, extensions);\r\n\r\n                    const inConfig = config || {};\r\n                    const defaultConfig = _getDefaultConfig();\r\n                    for (const option in defaultConfig) {\r\n                        _config[option] = ConfigurationManager.getConfig(\r\n                            inConfig as any,\r\n                            option,\r\n                            _self.identifier,\r\n                            _config[option]\r\n                        );\r\n                    }\r\n        \r\n                    if (!_config.disableDeviceCollection) {\r\n                        _collectDeviceInfo();\r\n                    }\r\n        \r\n                    if (extensions) {\r\n                        CoreUtils.arrForEach(extensions, ext => {\r\n                            const identifier = (ext as ITelemetryPlugin).identifier;\r\n                            if (identifier === AnalyticsPluginIdentifier) {\r\n                                _analyticsPlugin = (ext as any) as IAppInsights;\r\n                            }\r\n                        });\r\n                    }\r\n        \r\n                    if (!_config.disableExceptionCollection) {\r\n                        _setExceptionHandler();\r\n                    }\r\n                }\r\n            };\r\n\r\n            _self.processTelemetry = (item: ITelemetryItem, itemCtx?: IProcessTelemetryContext) => {\r\n                _applyDeviceContext(item);\r\n                _self.processNext(item, itemCtx);\r\n            };\r\n        \r\n            _self.setDeviceId = (newId: string) => {\r\n                _device.id = newId;\r\n            };\r\n        \r\n            _self.setDeviceModel = (newModel: string) => {\r\n                _device.model = newModel;\r\n            };\r\n        \r\n            _self.setDeviceType = (newType: string) => {\r\n                _device.deviceClass = newType;\r\n            };\r\n        \r\n            \r\n            /**\r\n             * Automatically collects native device info for this device\r\n             */\r\n            function _collectDeviceInfo() {\r\n                _device.deviceClass = \"Handset\";\r\n                _device.id = DeviceInfo.getUniqueID(); // Installation ID\r\n                _device.model = DeviceInfo.getModel();\r\n            }\r\n\r\n            function _applyDeviceContext(item: ITelemetryItem) {\r\n                if (_device) {\r\n                    item.ext = item.ext || {};\r\n                    item.ext.device = item.ext.device || ({} as IDevice);\r\n                    if (typeof _device.id === 'string') {\r\n                        item.ext.device.localId = _device.id;\r\n                    }\r\n                    if (typeof _device.model === 'string') {\r\n                        item.ext.device.model = _device.model;\r\n                    }\r\n                    if (typeof _device.deviceClass === 'string') {\r\n                        item.ext.device.deviceClass = _device.deviceClass;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _setExceptionHandler() {\r\n                const _global = global as any;\r\n                if (_global && _global.ErrorUtils) {\r\n                    // intercept react-native error handling\r\n                    _defaultHandler = (typeof _global.ErrorUtils.getGlobalHandler === 'function' && _global.ErrorUtils.getGlobalHandler()) || _global.ErrorUtils._globalHandler;\r\n                    _global.ErrorUtils.setGlobalHandler(_trackException.bind(this));\r\n                }\r\n            }\r\n\r\n            // default global error handler syntax: handleError(e, isFatal)\r\n            function _trackException(e, isFatal) {\r\n                const exception: IExceptionTelemetry = { exception: e, severityLevel: SeverityLevel.Error };\r\n\r\n                if (_analyticsPlugin) {\r\n                    _analyticsPlugin.trackException(exception);\r\n                } else {\r\n                    _self.diagLog().throwInternal(\r\n                        LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"Analytics plugin is not available, ReactNative plugin telemetry will not be sent: \");\r\n                }\r\n\r\n                // call the _defaultHandler - react native also gets the error\r\n                if (_defaultHandler) {\r\n                    _defaultHandler.call(global, e, isFatal);\r\n                }\r\n            }\r\n        });\r\n\r\n        function _getDefaultConfig(): IReactNativePluginConfig {\r\n            return {\r\n                // enable auto collection by default\r\n                disableDeviceCollection: false,\r\n                disableExceptionCollection: false\r\n            };\r\n        }\r\n    }\r\n\r\n    public initialize(\r\n        config?: IReactNativePluginConfig | object, // need `| object` to coerce to interface\r\n        core?: IAppInsightsCore,\r\n        extensions?: IPlugin[]) {\r\n\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    public processTelemetry(env: ITelemetryItem, itemCtx?: IProcessTelemetryContext) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    public setDeviceId(newId: string) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    public setDeviceModel(newModel: string) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    public setDeviceType(newType: string) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n}\r\n"]}